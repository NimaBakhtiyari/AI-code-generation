[tool.poetry]
name = "neurosymbolic-codegen-ai"
version = "0.1.0"
description = "Production-grade Neuro-Symbolic Code Generation AI System with Multi-Agent Coordination, Adaptive RL, and Self-Repair Mechanisms"
authors = ["AI Research Team"]
readme = "README.md"
license = "Apache-2.0"
keywords = ["code-generation", "neuro-symbolic", "ai", "machine-learning", "symbolic-reasoning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.10"
torch = "^2.0.0"
transformers = "^4.35.0"
tree-sitter = "^0.20.0"
pysmt = "^0.9.5"
z3-solver = "^4.12.0"
faiss-cpu = "^1.7.4"
neo4j = "^5.14.0"
langchain = "^0.1.0"
deepspeed = "^0.12.0"
ray = {extras = ["default"], version = "^2.8.0"}
pydantic = "^2.5.0"
structlog = "^23.2.0"
bandit = "^1.7.5"
mlflow = "^2.9.0"
datasets = "^2.15.0"
sentencepiece = "^0.1.99"
tokenizers = "^0.15.0"
safetensors = "^0.4.0"
accelerate = "^0.25.0"
bitsandbytes = "^0.41.0"
peft = "^0.7.0"
tiktoken = "^0.5.2"
pygments = "^2.17.0"
astunparse = "^1.6.3"
libcst = "^1.1.0"
semgrep = "^1.50.0"
spdx-tools = "^0.8.0"
licensecheck = "^2023.1.1"
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.0"
mypy = "^1.7.0"
isort = "^5.13.0"
flake8 = "^6.1.0"
pre-commit = "^3.5.0"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic-settings = "^2.1.0"
numpy = "^1.24.0"
python-multipart = "^0.0.6"

[tool.poetry.group.dev.dependencies]
ipython = "^8.18.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"
tensorboard = "^2.15.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
